#!/usr/bin/perl -w

=head1 NAME

sift - A scriptable IMAP utility program.

=cut

=head1 SYNOPSIS

  Connection Options:

   --username     Specify the username to login to IMAP with.
   --password     Specify the matching password for the specified username.
   --server       The server to connect with.

  Misc Options:

   --dry-run      Don't execute anything.
   --execute      Specify a rule to execute directly.
   --no-cache     Don't cache messages.
   --ssl          Force the use of SSL.

=cut


=head1 ABOUT

  sift is an IMAP client utility which allows you to manipulate
 a remote mailbox via a collection of simple rules.

  The program has a number of built in primitives for selecting
 messages from the remote mailbox, and for performing simple
 actions upon them.

  For selection you may:

=over 8

=item Search based on flags ("new" vs. "read")

=item Search based on message sender, recipients, and other header values.

=item Search based on message bodies.

=back


  Once you have selected a number of messages you may perform actions upon
 them:


=over 8

=item Copy or move the messages into a new folder.

=item Delete the messages.

=item Change flags ("new" vs. "read").

=item Execute programs with the message bodies as input.

=back


  It is designed to be simple to understand and use, but it might not
 be flexible enough for complex cases.

=cut


=head1 SAMPLE USAGE

  As many options may be specified directly upon the command line,
 it is possible to conduct many things directly.

  The following example will delete all messages contained in the
 'spam' folder of a given Google Mail account:

=for example begin

   sift --username=foo --password=bar --server=imap.gmail.com \
    --ssl --execute "folder:[Google#Mail]/Spam delete" --verbose

=for example end

  This example might look simpler as an input file.  If you save
 the following into a file you may execute it via "sift filename":

=for example begin

username:  foo
passsword: bar
server:    imap.gmail.com

#
#  Delete all messages in the spam folder.
#
folder:[Google#Mail]/Spam delete

=for example end

  More complex rules may be constructed, as described in the README
 file accompanying this release.

=cut



=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut

=head1 LICENSE

Copyright (c) 2008 by Steve Kemp.  All rights reserved.

This module is free software;
you can redistribute it and/or modify it under
the same terms as Perl itself.
The LICENSE file contains the full text of the license.

=cut



use strict;
use warnings;

use strict;
use warnings;
use File::Temp qw/ tempfile tempdir /;
use Getopt::Long;
use Net::IMAP::Simple;
use Net::IMAP::Simple::SSL;
use Pod::Usage;



#
#  Command line / configuration file arguments.
#
my %CONFIG;


#
#  Dispatch table.
#
my %DISPATCH;


#
#  Global IMAP handle
#
my $imap;

#
#  Global selected messages
#
my @messages;
my $original;

#
#  Release:  Set by "make release"
#
$CONFIG{ 'version' } = 'UNRELEASED';



#
#  Parse command line arguments.
#
parseCommandLineArguments();



#
#  Early login?
#
if ( $CONFIG{ 'server' } && $CONFIG{ 'username' } && $CONFIG{ 'password' } )
{

    #
    #  Are we using SSL?
    #
    my $ssl = $CONFIG{ 'ssl' } || 0;
    $ssl = 1 if ( $CONFIG{ 'server' } =~ /imap\.gmail\.com/i );

    # login
    $imap = login( $CONFIG{ 'server' },
                   $CONFIG{ 'username' },
                   $CONFIG{ 'password' }, $ssl );

}
else
{
    $imap = undef;
}



#
#  Populate
#
%DISPATCH = populateDispatch();


#
#  Are we running directly?
#
if ( $CONFIG{ 'execute' } )
{

    # If we've logged in OK then we can run the snippet.
    if ( defined $imap )
    {

        # run the "script"
        processRule( $CONFIG{ 'execute' } );

    }
    else
    {
        print "Please specify username, password and server to connect to.\n";
    }

    # logout
    $imap->quit() if ( defined($imap) );

    exit;
}



#
#  Are there files specified upon the command line?
#
foreach my $file (@ARGV)
{

    #
    #  If we've not been given login details then we need to find
    # them in the script file.  Use them to login.
    #
    if ( !defined($imap) )
    {

        #
        #  We need to find the login details.
        #
        #  Ideally these will come from the file, to allow them to
        # override the command line.
        #  If they aren't in the file then we'll use the command
        # line version(s) as a fall-back.
        #
        my $username = findUsername($file) || $CONFIG{ 'username' } || undef;
        my $password = findPassword($file) || $CONFIG{ 'password' } || undef;
        my $server   = findServer($file)   || $CONFIG{ 'server' }   || undef;
        my $ssl      = $CONFIG{ 'ssl' }    || 0;

        if ( !defined($username) )
        {
            print "Failed to find username in the file $file\n";
            print "aborting\n";
            exit;
        }
        if ( !defined($password) )
        {
            print "Failed to find password in the file $file\n";
            print "aborting\n";
            exit;
        }
        if ( !defined($server) )
        {
            print "IMAP server unknown.\n";
            exit;
        }

        #
        #  GMail requires the use of SSL.
        #
        $ssl = 1 if ( $server =~ /imap\.gmail\.com/i );

        #
        #  Login
        #
        $imap = login( $server, $username, $password, $ssl );
    }

    #
    #  Run the file.
    #
    processRules($file);

    #
    #  Logout.
    #
    $imap->quit();

    #
    #  Reset so that we can reconnect properly
    #
    $imap = undef;
}



#
#  All done
#
exit;



=begin

  Parse the command line looking for arguments.

=end doc

=cut


sub parseCommandLineArguments
{
    my $HELP    = 0;
    my $MANUAL  = 0;
    my $VERSION = 0;


    #
    #  Parse options.
    #
    if (
        !GetOptions(

            # Help options
            "help",    \$HELP,
            "manual",  \$MANUAL,
            "version", \$VERSION,
            "verbose", \$CONFIG{ 'verbose' },


            # login details
            "user=s",   \$CONFIG{ 'username' },
            "pass=s",   \$CONFIG{ 'password' },
            "server=s", \$CONFIG{ 'server' },

            # dry run?
            "dry-run", \$CONFIG{ 'dry-run' },

            # caching related
            "no-cache",     \$CONFIG{ 'no-cache' },
            "global-cache", \$CONFIG{ 'global-cache' },

            # execute directly?
            "execute=s", \$CONFIG{ 'execute' },

            # use SSL?
            "ssl", \$CONFIG{ 'ssl' },

        )
      )
    {
        exit;
    }

    pod2usage(1) if $HELP;
    pod2usage( -verbose => 2 ) if $MANUAL;

    if ($VERSION)
    {
        print "sift v$CONFIG{'version'}\n";
        exit;
    }

}



=begin doc

  Find the username from the given configuration script / file.

=end doc

=cut

sub findUsername
{
    my ($file) = (@_);

    return ( findLoginField( "username", $file ) );
}


=begin doc

  Find the password from the given configuration file / script.

=end doc

=cut

sub findPassword
{
    my ($file) = (@_);

    return ( findLoginField( "password", $file ) );
}


=begin doc

  Find the server from the given configuration file / script.

=end doc

=cut

sub findServer
{
    my ($file) = (@_);

    return ( findLoginField( "server", $file ) );
}



=begin doc

  Find username / password details from our configuration file.

=end doc

=cut

sub findLoginField
{
    my ( $field, $file ) = (@_);

    open( INPUT, "<", $file )
      or die "failed to read $file - $!";

    my $result = undef;

    while ( my $line = <INPUT> )
    {
        next if ( !$line );
        chomp($line);

        if (    ( $line =~ /^\Q$field\E:(.*)/i )
             && ( !defined($result) ) )
        {
            $result = $1;
        }
    }
    close(INPUT);

    $result =~ s/^\s+// if ( defined($result) );
    $result =~ s/\s+$// if ( defined($result) );

    return ($result);
}



=begin doc

  Login to the remote server, and return a connected IMAP object if
 that succeeded.  Error on failure.

=end doc

=cut

sub login
{
    my ( $server, $user, $pass, $ssl ) = (@_);

    $CONFIG{ 'verbose' } && print "Logging in: $user\@$server [SSL: $ssl]\n";

    #
    #  Connect
    #
    my $imap;

    if ($ssl)
    {
        $imap = Net::IMAP::Simple::SSL->new($server)
          or die "Unable to connect to IMAP server: '$server'.\n";
    }
    else
    {
        $imap = Net::IMAP::Simple->new($server)
          or die "Unable to connect to IMAP server: '$server'.\n";
    }

    #
    # Login
    #
    if ( ! $imap->login( $user, $pass ) )
    {
        print "IMAP Login failed :" . $imap->errstr . "\n";
        print "\nCredentials were\n";
        print "\tserver: $server\n";
        print "\tuser  : $user\n";
        print "\tpass  : $pass\n";
        exit;
    }


    return ($imap);
}



=begin doc

  Read the specified rule-file, and process each line which
 appears to be valid.

=end doc

=cut

sub processRules
{
    my ($file) = (@_);

    open( INP, "<", $file )
      or die "failed to read : $file - $!";

    while ( my $line = <INP> )
    {

        # skip empty lines and comments.
        next if ( !$line );
        next if ( $line =~ /^#/ );

        # look for lines starting with 'folder'
        next if ( $line !~ /^folder/ );

        # ok we have a valid rule line, process it.
        processRule($line);
    }

    close(INP);
}


=begin doc

  Process a single line of space-deliminated rule tokens, and arguments.

  These are read from the files passed to us, or via the command line
 flag "--execute".

=end doc

=cut

sub processRule
{
    my ($line) = (@_);

    #
    #  Tokenize
    #
    foreach my $token ( split( /[ \t]/, $line ) )
    {

        #
        #  Skip blank tokens
        #
        $token =~ s/[\r\n]//g if ($token);
        next if ( !length($token) || ( $token =~ /^([\t ]+)$/ ) );

        #
        #  Command and argument
        #
        my ( $command, $argument ) = split( /\:/, $token );

        #
        #  No messages selected then we're done?
        #
        if (    ( !scalar(@messages) )
             && ( $command !~ /folder/i )
             && ( !$CONFIG{ 'dry-run' } ) )
        {
            $CONFIG{ 'verbose' }
              && print "Ignoring rule: $command - No messages are selected\n";
            next;
        }

        #
        #  Debugging
        #
        $CONFIG{'verbose'} && print "Processing '$token' current folder: " . $imap->current_box() . "\n";

        #
        #  Get the key
        #
        my $orig = $command;
        $command = $1 if ( $command =~ /\!(.*)/ );

        #
        #  Get the reference to the command handler from our
        # dispatch table.
        #
        my $ref = $DISPATCH{ lc($command) };

        #
        #  Found it
        #
        if ($ref)
        {

            #
            #  Call it
            #
            if ( $ref->{ 'arg' } )
            {
                if ( defined($argument) )
                {

                    #
                    #  Handle argument expansion
                    #
                    $argument =~ s/([^#])#([^#])/$1 $2/g if ($argument);
                    $argument =~ s/##/#/g if ($argument);

                    if ( $CONFIG{ 'dry-run' } )
                    {
                        print "dry-run: Calling handler $orig('$argument');\n";
                    }
                    else
                    {

                        $ref->{ 'sub' }->( $orig, $argument );
                    }
                }
                else
                {
                    print "WARNING: Missing argument for $orig\n";
                }
            }
            else
            {
                if ( $CONFIG{ 'dry-run' } )
                {
                    print "dry-run: Calling handler $orig();\n";
                }
                else
                {
                    $ref->{ 'sub' }->($orig);
                }
            }
        }
        else
        {
            print "WARNING: unknown rule: $command [$orig]\n";
        }
    }
}


=begin doc

  Primitive to return a list of message IDs which are messages that
 are not read.

=end doc

=cut

sub findUnread
{
    my $sh = $imap->{ sock };
    print $sh "A$original SEARCH unseen\r\n";

    my @matches;
    while ( my $resp = $sh->getline() )
    {
        last if ( $resp =~ /OK/ );

        if ( $resp =~ /SEARCH / )
        {
            if ($resp) {chomp($resp);}

            foreach my $tok ( split( / /, $resp ) )
            {
                if ( $tok =~ /^([0-9]+)/ )
                {
                    $tok = $1;
                }
                push( @matches, $tok ) if ( $tok =~ /^([0-9]+)$/ );
            }
        }
    }
    return (@matches);
}



=begin doc

  Primitive:  Find the messages IDs of messages which have been
 read in the current folder.

=end doc

=cut

sub findRead
{
    my $sh = $imap->{ sock };
    print $sh "A$original SEARCH seen\r\n";

    my @matches;
    while ( my $resp = $sh->getline() )
    {
        last if ( $resp =~ /OK/ );

        if ($resp) {chomp($resp);}

        if ( $resp =~ /SEARCH / )
        {
            foreach my $tok ( split( / /, $resp ) )
            {
                if ( $tok =~ /^([0-9]+)/ )
                {
                    $tok = $1;
                }

                push( @matches, $tok ) if ( $tok =~ /^([0-9]+)$/ );
            }
        }
    }

    return (@matches);
}



=begin doc

  Match a given value in the named header. Optionally invert the
 matching.

=end doc

=cut

sub matchMessageHeader
{
    my ( $message, $header, $value, $invert ) = (@_);

    # invert is optional - so ensure it is defined.
    $invert = 0 if ( !defined($invert) );

    # no message? no match.
    if ( ( !$message ) || ( !@$message ) )
    {
        print "No message\n";
        return 0;
    }


    my $found = 0;

    foreach my $line (@$message)
    {
        next if ($found);

        if (    ( $line =~ /^\Q$header\E:(.*)/i )
             && ( !$found ) )
        {

            #
            #  OK we have the header.
            #
            my $val = $1;

            #
            #  Strip linefeeds / linebreaks
            #
            $val =~ s/[\r\n]//g;
            $CONFIG{ 'verbose' } && print "Found header '$header' - '$val'\n";

            if ($invert)
            {
                if ( $val !~ /$value/i )
                {
                    $CONFIG{ 'verbose' } && print "Matched: $value\n";
                    return 1;
                }
            }
            else
            {
                if ( $val =~ /$value/i )
                {
                    $CONFIG{ 'verbose' } && print "Matched: $value\n";
                    return 1;
                }
            }
        }
    }

    return 0;
}



=begin doc

  Does the body of the message match the given term?

=end doc

=cut

sub matchMessageBody
{
    my ( $message, $term, $invert ) = (@_);

    # invert is optional - so ensure it is defined.
    $invert = 0 if ( !defined($invert) );

    # no message? no match.
    return 0 if ( ( !$message ) || ( !@$message ) );


    my $body = 0;

    foreach my $line (@$message)
    {

        # strip newline/linefeed.
        $line =~ s/[\r\n]//g if ( defined($line) );

        # end of the header?
        $body = 1 if ( $line =~ /^$/ );

        if ( ($body) && ( $line =~ /$term/i ) )
        {
            $CONFIG{ 'verbose' } && print "Body line '$line' matches '$term'\n";

            return 1;
        }
    }
    return 0;
}



=begin doc

  Get a message from the imap store - and cache it.

=end doc

=cut

sub getMessage
{
    my ( $imap, $id ) = (@_);

    my $msg;

    #
    #  Is it cached?
    #
    if ( $CONFIG{ 'cache' } && ( -e $CONFIG{ 'cache' } . "/$id" ) )
    {
        $CONFIG{ 'verbose' }
          && print "Fetching message ID:$id from $CONFIG{'cache'}/$id\n";

        open( CACHE, "<", "$CONFIG{'cache'}/$id" )
          or die "Failed to read from cache $CONFIG{'cache'}/$id - $!";
        foreach my $line (<CACHE>)
        {
            push( @$msg, $line );
        }
        close(CACHE);
    }
    else
    {

        #
        #  Fetch
        #
        $msg = $imap->get($id);

        #
        #  Save to cache
        #
        if ( $CONFIG{ 'cache' } )
        {
            $CONFIG{ 'verbose' }
              && print "Saving message ID:$id to $CONFIG{'cache'}/$id\n";
            open( CACHE, ">", "$CONFIG{'cache'}/$id" )
              or die "Failed to write to cache $CONFIG{'cache'}/$id - $!";
            foreach my $line (@$msg)
            {
                print CACHE $line;
            }
            close(CACHE);
        }
    }

    return ($msg);
}



=begin doc

  Populate our global dispatch table.

=end doc

=cut

sub populateDispatch
{
    my %dispatch = (

        #
        #  Folder changing
        #
        "folder" => {
                      sub => \&do_folder_change,
                      arg => 1,
        },

        #
        #  Diagnostics.
        #
        "dump" => { sub => \&do_dump, },

        #
        #  header searching.
        #
        "to" => {
                  sub => \&do_header_search,
                  arg => 1,
        },
        "from" => {
                    sub => \&do_header_search,
                    arg => 1,
        },
        "subject" => {
                       sub => \&do_header_search,
                       arg => 1,
        },
        "bcc" => {
                   sub => \&do_header_search,
                   arg => 1,
        },

        #
        #  Body searching
        #
        "body" => {
                    sub => sub {\&do_body_search},
                    arg => 1,
        },

        #
        #  Status searching
        #
        "status" => {
                      sub => \&do_status_search,
                      arg => 1,
        },
        "mark" => {
                    sub => \&do_status_change,
                    arg => 1,
        },

        #
        #  Manipulation actions.
        #
        "copy" => {
                    sub => \&do_message_copy,
                    arg => 1,
        },

        "delete" => { sub => \&do_delete, },

        "exec" => {
                    sub => \&do_exec,
                    arg => 1,
        },

        "execonce" => {
                        sub => \&do_exec_once,
                        arg => 1,
        },

        "move" => {
                    sub => \&do_message_move,
                    arg => 1,
        },
    );

    return (%dispatch);
}



=begin doc

  Handler:  Delete each selected message.

=end doc

=cut

sub do_delete
{
    my ($cmd) = (@_);

    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );

    foreach my $id (@messages)
    {
        $CONFIG{ 'verbose' } && print "\t$id\n";
        $imap->delete($id);
    }

    @messages = ();
}



=begin doc

  Handler:  Execute the named program once for each selected message.

=end doc

=cut

sub do_exec
{
    my ( $cmd, $argument ) = (@_);

    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );

    foreach my $id (@messages)
    {
        $CONFIG{ 'verbose' } && print "\t$id\n";
        my $msg = getMessage( $imap, $id );

        if ($msg)
        {
            my ( $fh, $filename ) = tempfile();

            foreach my $m (@$msg)
            {
                print $fh $m;
            }
            close($fh);

            system("cat $filename | $argument");
            unlink($filename);
        }
    }
}


=begin doc

  Handler:  Execute the named program once if there are seleected messages.

=end doc

=cut

sub do_exec_once
{
    my ( $cmd, $argument ) = (@_);

    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );

    system($argument );
}



=begin doc

  Handler:  Change the status of a message.  ("new" vs. "old").

=end doc

=cut

sub do_status_change
{
    my ( $cmd, $argument ) = (@_);


    #
    #  No option if there are no messages.
    #
    my $count = scalar(@messages);
    return if ( !$count );


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );


    if (    ( $argument =~ /^new$/i )
         || ( $argument =~ /^read$/i ) )
    {
        $CONFIG{ 'verbose' } && print "Marking messages as read\n";
        foreach my $id (@messages)
        {
            $CONFIG{ 'verbose' } && print "\t$id\n";
            $imap->_process_cmd(
                                 cmd     => [STORE => qq[$id +FLAGS (\\Seen)]],
                                 final   => sub    {1},
                                 process => sub    { },
            );
        }
    }
    elsif (    ( $argument =~ /^unread$/i )
            || ( $argument =~ /^old$/i ) )
    {
        $CONFIG{ 'verbose' } && print "Marking messages as unread\n";
        foreach my $id (@messages)
        {
            $CONFIG{ 'verbose' } && print "\t$id\n";
            $imap->_process_cmd(
                               cmd => [STORE => qq[$id -FLAGS.SILENT (\\Seen)]],
                               final   => sub {1},
                               process => sub { },
            );
        }
    }
    else
    {
        print "WARNING:  Ignoring unknown status type '$argument'\n";
    }
}


=begin doc

  Handler:  Search for message by status ("read"/"unread" vs "new"/"old").

=end doc

=cut

sub do_status_search
{
    my ( $cmd, $argument ) = (@_);

    if (    ( $argument =~ /^new$/i )
         || ( $argument =~ /^unread$/i ) )
    {
        $CONFIG{ 'verbose' } && print "Finding unread messages\n";
        @messages = findUnread();
        my $c = scalar(@messages);
        $CONFIG{ 'verbose' } && print "\tFound $c messages\n";
    }
    elsif (    ( $argument =~ /^old$/i )
            || ( $argument =~ /^read$/i ) )
    {
        $CONFIG{ 'verbose' } && print "Finding old messages\n";
        @messages = findRead();
        my $c = scalar(@messages);
        $CONFIG{ 'verbose' } && print "\tFound $c messages\n";
    }
    else
    {
        print "WARNING: Ignoring unknown status type '$argument'\n";
    }
}


=begin doc

  Handler:  Copy all selected messages to a new folder.

=end doc

=cut

sub do_message_copy
{
    my ( $cmd, $argument ) = (@_);


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );


    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );

    $CONFIG{ 'verbose' } && print "Copying messages to folder: '$argument'\n";

    foreach my $id (@messages)
    {
        $CONFIG{ 'verbose' } && print "\t$id\n";
        $imap->copy( $id, $argument );
    }
}


=begin doc

  Handler:  Move all selected messages to the named folder.

=end doc

=cut

sub do_message_move
{
    my ( $cmd, $argument ) = (@_);


    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );

    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );

    $CONFIG{ 'verbose' } && print "Moving messages to folder: '$argument'\n";

    foreach my $id (@messages)
    {
        print "\t$id\n";
        if ( $imap->copy( $id, $argument ) )
        {
            $imap->delete($id);
        }
    }

}


=begin doc

 Handler:  Dump messaes to the console.

=end doc

=cut

sub do_dump
{
    my ($command) = (@_);

    #
    #  No option if there are no messages.
    #
    return if ( !scalar(@messages) );

    #
    #  Dry run?  Stop here.
    #
    return if ( $CONFIG{ 'dry-run' } );


    #
    #  Dump details of the message
    #
    my $to      = '';
    my $from    = '';
    my $subject = '';

    foreach my $id (@messages)
    {
        my $msg = getMessage( $imap, $id );

        if ($msg)
        {
            foreach my $line (@$msg)
            {
                $subject = $1 if ( $line =~ /^Subject: (.*)/i );
                $from    = $1 if ( $line =~ /^From: (.*)/i );
                $to      = $1 if ( $line =~ /^To: (.*)/i );
            }

            print <<EOF;
[$id]
	To: $to
	From: $from
	Subject: $subject
EOF
        }
    }

}


=begin doc

  Handler:  Search for a given value in a header.

=end doc

=cut

sub do_header_search
{
    my ( $header, $arg ) = (@_);

    $CONFIG{ 'verbose' }
      && print "Searching header '$header' for matches with '$arg'\n";

    #
    #  The header.
    #
    my $invert = 0;
    if ( $header =~ /^\!(.*)$/ )
    {
        $invert = 1;
        $header = $1;
    }

    $CONFIG{ 'verbose' } && $invert && print "[inverted match]\n";

    my @selected = ();


    foreach my $id (@messages)
    {
        my $msg = getMessage( $imap, $id );

        if ( matchMessageHeader( $msg, $header, $arg, $invert ) )
        {
            push( @selected, $id );
        }
    }

    @messages = @selected;
}


=begin doc

  Handler:  Search for a value in the body of the message.

=end doc

=cut

sub do_body_search
{
    my ( $command, $value ) = (@_);



    #
    #  The header.
    #
    my $invert = 0;
    if ( $command =~ /^\!(.*)$/ )
    {
        $invert  = 1;
        $command = $1;
    }

    my @selected = ();


    foreach my $id (@messages)
    {
        my $msg = getMessage( $imap, $id );


        if ( matchMessageHeader( $msg, $value, $invert ) )
        {
            push( @selected, $id );
        }
    }

    @messages = @selected;
}


=begin doc

  Handler: Change folder.

=end doc

=cut

sub do_folder_change
{
    my ( $command, $argument ) = (@_);

    $CONFIG{ 'verbose' } && print "Changing to folder: '$argument'\n";


    my $count = $imap->select($argument);
    if ( !defined $count )
    {
        print "\tSelecting folder '$argument' failed\n";
        print "\tThe folder is probably empty\n";
        print "\tError message returned was: " . $imap->errstr . "\n";
        exit;
    }

    $original = $count;

    #
    # Show message count
    #
    $CONFIG{ 'verbose' } && print "\tFound $count messages\n";
    @messages = ();
    foreach my $id ( 1 .. $count )
    {
        push( @messages, $id );
    }

}
